// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {ERC721} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";
import {Strings} from "@openzeppelin/contracts/utils/Strings.sol";
import {Base64} from "@openzeppelin/contracts/utils/Base64.sol";
import {IERC4883} from "./IERC4883.sol";
import {IERC165} from "@openzeppelin/contracts/utils/introspection/IERC165.sol";

contract HappyBroSadBro is ERC721, Ownable, IERC4883 {
    enum Emotion {
        Happy,
        Sad
    }

    uint256 private _nextTokenId;
    int256 public immutable zIndex;
    mapping(uint256 => Emotion) private _tokenEmotions;

    constructor(
        address initialOwner
    ) ERC721("EmotionNFT", "EMO") Ownable(initialOwner) {}

    function supportsInterface(
        bytes4 interfaceId
    ) public view virtual override(ERC721, IERC165) returns (bool) {
        return
            interfaceId == type(IERC4883).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _nextTokenId++;
        _safeMint(to, tokenId);
    }

    function toggleEmotion(uint256 tokenId) public onlyOwner {
        Emotion currentEmotion = _tokenEmotions[tokenId];

        if (currentEmotion == Emotion.Happy) {
            _tokenEmotions[tokenId] = Emotion.Sad;
        } else {
            _tokenEmotions[tokenId] = Emotion.Happy;
        }
    }

    function tokenURI(
        uint256 tokenId
    ) public view override returns (string memory) {
        return
            string.concat(
                "data:application/json;base64,",
                Base64.encode(
                    bytes(
                        abi.encodePacked(
                            '{"name": "HappyBroSadBro #',
                            Strings.toString(tokenId),
                            '", "description": "HappyBroSadBro #',
                            Strings.toString(tokenId),
                            '", "image": "data:image/svg+xml;base64,',
                            _generateBase64Image(tokenId),
                            '"}'
                        )
                    )
                )
            );
    }

    function _generateBase64Image(
        uint256 tokenId
    ) internal view returns (string memory) {
        return Base64.encode(bytes(_generateSVG(tokenId)));
    }

    function _generateSVG(
        uint256 tokenId
    ) internal view returns (string memory) {
        return
            string.concat(
                '<svg id="HappyBroSadBro#',
                Strings.toString(tokenId),
                '" width="113" height="147" viewBox="0 0 113 147" fill="none" xmlns="http://www.w3.org/2000/svg">',
                render(tokenId),
                "</svg>"
            );
    }

    function render(
        uint256 tokenId
    ) public view override returns (string memory) {
        return string.concat(_renderFace(), _renderEmotion(tokenId));
    }

    function _renderFace() public pure returns (string memory) {
        return
            '<path d="M108.627 120.438a17.3 17.3 0 0 0-8.033-8.46L76.295 99.715c-1.026 8.648-9.761 15.404-20.388 15.404-10.581 0-19.285-6.698-20.373-15.293l-24.079 12.152a17.305 17.305 0 0 0-8.033 8.46L0 128.193s11.671 18.18 55.898 18.18h.253c44.227 0 55.898-18.18 55.898-18.18l-3.422-7.755Z" fill="#C71858"/><path d="M55.907 115.119c10.627 0 19.362-6.756 20.388-15.404l-3.382-1.707H39.138l-3.602 1.818c1.086 8.595 9.79 15.293 20.371 15.293Z" fill="#9B003F"/><path d="M87.456 47.687c1.103.367 1.93 1.305 2.493 2.322 1.613 2.917 1.388 6.534.411 9.72-.967 3.155-2.978 6.375-6.187 7.15-.819.198-1.705.217-2.482-.108-1.944-.812-2.46-3.311-2.446-5.418.022-3.323.905-6.458 1.64-9.66.568-2.485 4.015-4.855 6.571-4.006Zm-62.718 0c-1.103.367-1.93 1.305-2.493 2.322-1.613 2.917-1.388 6.534-.41 9.72.966 3.155 2.977 6.375 6.186 7.15.82.198 1.705.217 2.482-.108 1.944-.812 2.46-3.311 2.446-5.418-.022-3.323-.905-6.458-1.639-9.66-.569-2.485-4.016-4.855-6.572-4.006Z" fill="#E0AB7F"/><path d="M88.783 54.462c-.166-.678-.383-1.337-.748-1.962-.353-.62-.94-1.254-1.694-1.526-1.493-.568-3.078-.011-4.003 1a.253.253 0 0 0-.034.294.253.253 0 0 0 .344.096l.01-.005c1.037-.586 2.305-.703 3.194-.258.43.2.772.589 1.044 1.068a.691.691 0 0 0-.124.252 7.233 7.233 0 0 1-2.882 4.075.398.398 0 0 0 .411.681 8.285 8.285 0 0 0 3.257-3.2c.492 2.213-.025 4.675-1.5 6.568a.258.258 0 0 0 .004.32c.09.105.248.118.354.03 2.052-1.735 2.985-4.723 2.367-7.433Zm-62.931-3.488c-.754.273-1.341.906-1.694 1.526-.365.625-.582 1.284-.748 1.962-.617 2.71.314 5.698 2.366 7.429.09.073.226.079.32.004a.25.25 0 0 0 .037-.353c-1.473-1.893-1.991-4.355-1.5-6.567a8.294 8.294 0 0 0 3.259 3.2.398.398 0 0 0 .411-.681 7.23 7.23 0 0 1-2.882-4.076.725.725 0 0 0-.024-.075c-.025-.064-.066-.115-.106-.166.273-.483.616-.877 1.05-1.078.889-.446 2.156-.33 3.194.257l.01.006a.252.252 0 0 0 .31-.39c-.925-1.01-2.51-1.567-4.003-.998Z" fill="#C17846"/><path d="M56.762 111.027h-1.728c-8.78 0-15.897-7.118-15.897-15.898V77.504H72.66v17.625c0 8.78-7.118 15.898-15.898 15.898Z" fill="#E0AB7F"/><path d="m28.4 28.45 2.625 39.21c.57 8.512 5.131 16.36 12.466 20.717a45.23 45.23 0 0 0 5.288 2.676c4.79 2.049 10.21 2.238 15.082.393l.29-.111c9.396-3.651 15.644-12.648 16.308-22.706l2.957-44.808S79.88 5.845 56.318 5.845C28.4 5.845 28.4 28.45 28.4 28.45Z" fill="#E7BE9C"/><path d="M77.726 59.783c-1.012-1.04-.414-3.578-.377-4.855l.369-12.81c.114-3.945 1.64-9.367-1.681-12.501-.17 1.945-.164 5.703-2.476 6.334-2.242.61-4.447-1.22-6.23-2.307-2.146-1.31-4.116-2.827-5.828-4.68a19.75 19.75 0 0 1 .685 4.113c.04.674.04 1.378-.242 1.99-.41.889-1.36 1.437-2.326 1.586-.966.15-1.952-.043-2.896-.297-3.476-.934-5.873-2.821-8.746-4.814-.775-.538-2.888-1.39-3.372-2.094l3.16 4.6c.724 1.053 1.472 2.4.869 3.526-.45.839-1.491 1.17-2.442 1.217-2.067.1-11.695-2.096-11.626-5.203l-.491 22.054c-.024 1.1-.06 2.245-.57 3.22-.508.977-1.644 1.72-2.7 1.408-1.493-.441-1.756-2.408-1.757-3.965-.005-5.484-.311-10.963-.732-16.43-.215-2.785.526-7.36-.835-9.872-.218-.403-.547-.732-.828-1.093-3.49-4.48-2.81-11.673.372-16.14 3.607-5.064 9.752-8.605 15.566-10.53 13.208-4.37 29.37-2.7 39.224 8.177 3.497 3.86 5.546 9.43 3.938 14.385-.544 1.676-1.477 3.218-1.883 4.932-.245 1.032-.291 2.1-.337 3.16l-.95 22.043c-.063 1.47-.162 3.043-1.053 4.215-.766 1.005-2.783 1.68-3.805.632Z" fill="#1B232E"/>';
    }

    function _renderEmotion(
        uint256 tokenId
    ) public view returns (string memory) {
        Emotion emotion = _tokenEmotions[tokenId];
        if (emotion == Emotion.Happy) {
            return
                string.concat(
                    '<path d="M68.2009 72.6436C68.2009 72.6436 63.1978 82.9483 56.049 82.6366C47.9962 82.2857 44.3301 73.0835 44.3301 73.0835C44.3301 73.0835 54.2087 76.7682 68.2009 72.6436Z" fill="#DEA378"/>'
                    '<path d="M44.3301 73.0842C44.3301 73.0842 54.3852 77.7073 68.2009 72.6436C68.2009 72.6436 63.3778 82.0367 56.02 81.963C48.2113 81.8857 44.3301 73.0842 44.3301 73.0842Z" fill="#571F1C"/>'
                    '<path d="M56.0199 81.9636C58.318 81.9863 60.368 81.0858 62.1021 79.8371C61.425 79.6117 60.559 79.4296 59.4302 79.3193C54.8698 78.8746 52.351 79.7806 51.0361 80.617C52.4676 81.4106 54.1272 81.9443 56.0199 81.9636Z" fill="#CB86B3"/>'
                    '<path d="M66.356 73.2646C56.927 76.2192 49.4816 74.7457 46.1823 73.7466C46.1823 73.7466 48.8259 76.8632 51.3081 77.1425C55.1356 77.5734 61.6598 77.45 63.5814 76.1661C64.6253 75.4683 65.6431 74.2417 66.356 73.2646Z" fill="#F0F4F3"/>'
                    '<path d="M46.1823 73.7466C46.1823 73.7466 46.9325 74.9388 49.6085 75.4869C54.4289 76.4757 62.8671 75.7945 65.328 74.5106C65.3493 74.4996 66.0781 73.6453 66.356 73.2646C56.927 76.2192 49.4816 74.7457 46.1823 73.7466Z" fill="#DCDCDC"/>'
                    '<path d="M46.6978 55.795C46.6978 57.891 45.8258 59.59 44.7488 59.59C43.6728 59.59 42.7998 57.891 42.7998 55.795C42.7998 53.699 43.6718 52 44.7488 52C45.8248 52 46.6978 53.699 46.6978 55.795Z" fill="#433A30"/>'
                    '<path d="M68.648 55.795C68.648 57.891 67.775 59.59 66.699 59.59C65.623 59.59 64.75 57.891 64.75 55.795C64.75 53.699 65.622 52 66.699 52C67.776 52 68.648 53.699 68.648 55.795Z" fill="#433A30"/>'
                    '<path d="M51.0772 64.3361C51.0062 63.1071 52.2331 62.6971 53.2461 62.6171C53.8461 62.5701 54.2601 62.7321 54.8201 62.8611C55.5481 63.0291 56.3312 62.9101 57.0502 62.7381C57.3622 62.6641 57.6671 62.5651 57.9791 62.4921C58.6261 62.3391 59.3171 62.2941 59.9501 62.4981C61.2801 62.9261 61.6422 64.2291 60.9302 65.3651C60.3032 66.3651 59.1002 67.0461 58.0321 67.4721C55.6361 68.4271 51.6052 67.4551 51.1062 64.5871C51.0912 64.4991 51.0812 64.4161 51.0772 64.3361Z" fill="#DEA378"/>'
                    '<path d="M67.0908 44.8554C66.2538 44.5654 65.2678 44.3104 64.8898 43.5084C64.4938 42.6674 65.0668 41.6054 65.9138 41.2234C66.7608 40.8404 67.7608 40.9964 68.6238 41.3414C70.1208 41.9394 71.3878 43.0934 72.1228 44.5284C72.3578 44.9874 72.5428 45.4874 72.5318 46.0034C72.5208 46.5184 72.2848 47.0514 71.8398 47.3104C70.9468 47.8314 70.4428 46.8984 69.8748 46.4024C69.0848 45.7104 68.0778 45.1964 67.0908 44.8554Z" fill="#1B232E"/>'
                    '<path d="M44.5528 45.4005C45.4198 45.2175 46.4298 45.0885 46.9048 44.3405C47.4028 43.5555 46.9668 42.4305 46.1748 41.9445C45.3828 41.4585 44.3708 41.4885 43.4708 41.7225C41.9108 42.1285 40.5088 43.1145 39.6008 44.4455C39.3098 44.8715 39.0648 45.3445 39.0098 45.8575C38.9558 46.3705 39.1238 46.9285 39.5328 47.2415C40.3538 47.8695 40.9708 47.0075 41.5958 46.5865C42.4668 45.9995 43.5308 45.6165 44.5528 45.4005Z" fill="#1B232E"/>'
                );
        } else {
            return
                string.concat(
                    '<path d="M45.0447 58.59C46.1211 58.59 46.9937 56.8909 46.9937 54.795C46.9937 52.6991 46.1211 51 45.0447 51C43.9683 51 43.0957 52.6991 43.0957 54.795C43.0957 56.8909 43.9683 58.59 45.0447 58.59Z" fill="#433A30"/>'
                    '<path d="M68.9439 54.795C68.9439 56.891 68.0719 58.59 66.9949 58.59C65.9189 58.59 65.0459 56.891 65.0459 54.795C65.0459 52.699 65.9189 51 66.9949 51C68.0709 51 68.9439 52.699 68.9439 54.795Z" fill="#433A30"/>'
                    '<path d="M51.3721 63.7189C51.3011 62.4899 52.5281 62.0799 53.5411 61.9999C54.1411 61.9529 54.5551 62.1149 55.1151 62.2439C55.8421 62.4119 56.6261 62.2929 57.3451 62.1209C57.6571 62.0469 57.9621 61.9479 58.2741 61.8749C58.9211 61.7219 59.6121 61.6769 60.2451 61.8809C61.5751 62.3089 61.9371 63.6119 61.2251 64.7479C60.5991 65.7479 59.3951 66.4289 58.3271 66.8549C55.9311 67.8099 51.9001 66.8379 51.4011 63.9699C51.3871 63.8829 51.3771 63.7999 51.3721 63.7189Z" fill="#DEA378"/>'
                    '<path d="M65.2891 78.193C62.2711 77.044 59.1461 76.451 56.0061 76.489C52.8631 76.524 49.7741 77.165 46.7401 78.287C46.4791 78.386 46.1881 78.255 46.0891 77.994C46.0071 77.779 46.0861 77.54 46.2621 77.409C49.0281 75.372 52.5461 74.413 55.9951 74.417C59.4471 74.42 62.9451 75.36 65.7581 77.311C65.9871 77.469 66.0431 77.783 65.8851 78.012C65.7511 78.204 65.5001 78.273 65.2891 78.193Z" fill="#C17846"/>'
                    '<path d="M64.3306 43.1065C64.4986 42.2855 65.4586 41.3125 66.3646 41.7675C66.6076 41.8895 66.7936 42.1005 66.9596 42.3175C67.6466 43.2165 68.1076 44.3145 68.9996 45.0095C69.5326 45.4245 70.0996 45.6765 70.6116 46.1455C71.2386 46.7205 71.4646 47.8375 70.5846 48.3205C69.6436 48.8365 68.0316 47.9835 67.2286 47.5285C65.7186 46.6715 63.9336 45.0405 64.3306 43.1065Z" fill="#1B232E"/>'
                    '<path d="M48.6323 43.1065C48.4643 42.2855 47.5043 41.3125 46.5983 41.7675C46.3553 41.8895 46.1693 42.1005 46.0033 42.3175C45.3163 43.2165 44.8553 44.3145 43.9633 45.0095C43.4303 45.4245 42.8623 45.6765 42.3513 46.1455C41.7243 46.7205 41.4973 47.8375 42.3783 48.3205C43.3193 48.8365 44.9313 47.9835 45.7343 47.5285C47.2433 46.6715 49.0293 45.0405 48.6323 43.1065Z" fill="#1B232E"/>'
                );
        }
    }
}
